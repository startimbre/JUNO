package studyb;

/**
 * LESSON B-29
 * 「DATABASE」
 * DBにアクセスするメッソドのクラス
 * DBメッソドのリスト
 * ------------------------------------------------------
 * 接続、切断、コミット、ロールバック、更新(INSERT,UPDATE,DELETE)、表示
 * ------------------------------------------------------
 * B14_execで実行
 *
 * @author jin.junho(ジンジュンホ、800189)
 * @since 1.8
 */
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

import com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException;
import com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;

public class B29_DBAccess{
	
	static final String JDBC_DRIVER = "com.mysql.jdbc.Driver";  
	static final String DB_URL = "jdbc:mysql://localhost/kadaidb?useSSL=false&useUnicode=yes&characterEncoding=UTF-8";
	static final String USERNAME = "root";
	static final String PASSWORD = "901214";
	
	private Connection conn = null;
	private PreparedStatement pstmt = null;
	private ResultSet rs = null;
	private int rowcnt = 0; // TABLE(ROW(行))の大きさを入れる変数
	private int colcnt = 0; // TABLE(COL(列))の大きさを入れる変数
	
	/**
	 * Connect.
	 * DBに接続、トランザクション開始
	 */
	
	public void connect() {
		try { // ドライバーローディンぐ
			Class.forName(JDBC_DRIVER);
			System.out.println("ドライバーローディンぐしました。");
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
		
		try { // DB接続
			conn = DriverManager.getConnection(DB_URL,USERNAME,PASSWORD);
			System.out.println("DBに接続しました。");
			conn.setAutoCommit(false);	// オートコミットを消しる
			System.out.println("AutoCommit OFF");
		}catch (SQLException se) {
			se.printStackTrace();
		}
	}

	/**
	 * Disconnect.
	 * DBから切断、トランザクション終了
	 */
	public void disconnect() {
		try {
			if( conn != null ) {
				conn.close();
			}
			if( rs != null ) {
				rs.close();
			}
			if( pstmt != null ) {
				pstmt.close();
			}
			System.out.println("DB EXIT");
		}catch (SQLException e) {
			System.out.println("データベースに切断エラー" + e);
		}
	}
	
	/**
	 * Commit.
	 * データを保存
	 */
	public void commit() {	
		try{
			conn.commit();
			System.out.println("データーをコミットしました。");
		}catch (SQLException e) {
			System.out.println("commitエラー" + e);
		}
	}

	public void rollback() {
		try{
			conn.rollback();
			System.out.println("データーをロールバックしました。");
		}catch (SQLException e) {
			System.out.println("rollbackエラー" + e);
		}
	}
	
	/**
	 * updateExec.
	 *　
	 *　INSERT 、UPDATE、DELETEを実行
	 * @param sql(SQL QUERYが入る引数)
	 * @return res(実行の判断をする戻り値）
	 */
	
	public int updateExec(String sql){
		int res = -1;
		try {
			pstmt = conn.prepareStatement(sql); 		
			res = pstmt.executeUpdate();
			System.out.println("testtable1が更新されました。");
			}
			// SQL文が間違ったとき例外処理
			catch(MySQLSyntaxErrorException syntaxError) { 
				System.out.println("### SQL QUERY エラー : SQL文を確認して入力してください。");
			}
			// PRIMARY KEYが重複した時の例外処理
			catch(MySQLIntegrityConstraintViolationException constraintError) {
				System.out.println("### INSERT エラー : PRIMARY　KEYが重複しています、データーを確認してください。");
			}
			catch(SQLException sqlError) {
				System.out.println("データー更新エラー" + sqlError);
			}
		return res;
	}

	/**
	 * selectExec.
	 *
	 *　Select文を実行 取得した値を戻す
	 * @param sql(SQL QUERYが入る引数)
	 * @return the string[][] 戻り値 取得した値（二次元配列)
	 */
	
	public String[][] selectExec(String sql){
		
		try {
			pstmt = conn.prepareStatement(sql);
			rs = pstmt.executeQuery();
			int j = 0;

			// COLの大きさ
		    ResultSetMetaData rsmd = rs.getMetaData();
		    colcnt = rsmd.getColumnCount(); // COLの値を入れる
		    
		    // ROWのおおきさ
			rs.last();   //　ROWのカーソルを最後に
			rowcnt = rs.getRow(); // ROWの値を入れる
			
			String[][] res = new String[rowcnt][colcnt]; // String[行][列]		
			rs.beforeFirst(); // ROWのカーソルを最初に
			
			// TABLE[0からrowcnt][0]にTESTNOの全てのレコードの値を、
			// TABLE[0からrowcnt][1]にNAMEの全てのレコードの値を、
			// TABLE[0からrowcnt][2]にKANAの全てのレコードの値を、入れます。

//			for( int i = 0;i < rowcnt;i++ ) {
//				if( rs.next() ) {
//					if(rs.getBoolean(1)) {
//					String tn = rs.getString(1);
//					res[i][j] = tn;
//					j++;
//					}
//					if(rs.getBoolean(2)) {
//					String nm = rs.getString(2);
//					res[i][j] = nm;
//					j++;
//					}
//					if(rs.getBoolean(3)) {
//					String kn = rs.getString(3);
//					res[i][j] = kn;
//					j++;
//					}
//				}
//			}
			for( int i = 0;i < rowcnt;i++ ) {
				if( rs.next() ) {
					String tn = rs.getString("TESTNO");
					String nm = rs.getString("NAME");
					String kn = rs.getString("KANA");
					
					res[i][0] = tn;
					res[i][1] = nm;
					res[i][2] = kn;
					System.out.println(rs.getBoolean(1));
					System.out.println(rs.getBoolean(2));
					System.out.println(rs.getBoolean(3));
				}
			}
			return res;
		} catch (SQLException e) {
			e.printStackTrace();
				return null;
		}
	}
	
	/**
	 * selectExec
	 *
	 *　Select文を実行 取得した値を戻す
	 * @param sql(SQL QUERYが入る引数)
	 * @param fromIdx SELECTの範囲(fromIdxまで探す）
	 * @return the string[][] 戻り値 取得した値（二次元配列)
	 */
	public String[][] selectExec(String sql, String searchRes){

		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, searchRes);
			rs = pstmt.executeQuery();

			// COLの大きさ
		    ResultSetMetaData rsmd = rs.getMetaData();
		    colcnt = rsmd.getColumnCount(); // COLの値を入れる
		    
		    // ROWのおおきさ
			rs.last();   //　ROWのカーソルを最後に
			rowcnt = rs.getRow(); // ROWの値を入れる
			
			String[][] res = new String[rowcnt][colcnt]; // String[行][列]		
			rs.beforeFirst(); // ROWのカーソルを最初に
			
			// TABLE[0からrowcnt][0]にTESTNOの全てのレコードの値を、
			// TABLE[0からrowcnt][1]にNAMEの全てのレコードの値を、
			// TABLE[0からrowcnt][2]にKANAの全てのレコードの値を、入れます。
				for( int i = 0;i < rowcnt;i++ ) {
					if( rs.next() ) {
						String tn = rs.getString("TESTNO");
						String nm = rs.getString("NAME");
						String kn = rs.getString("KANA");
						
						res[i][0] = tn;
						res[i][1] = nm;
						res[i][2] = kn;
					}
				}
				return res;
		} catch (SQLException e) {
			e.printStackTrace();
				return null;
		}
	}

	/**
	 * selectExec.
	 *
	 * @param sql(SQL QUERYが入る引数)
	 * @param fromIdx SELECTの範囲(fromIdxまで探す）
	 * @param toIdx SELECTの範囲(toIdxから探す）
	 * @return the string[][] 戻り値 取得した値（二次元配列)
	 */
	public String[][] selectExec(String sql, int fromIdx, int toIdx){

		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, toIdx);
			pstmt.setInt(2, fromIdx);
			rs = pstmt.executeQuery();

			// COLの大きさ
		    ResultSetMetaData rsmd = rs.getMetaData();
		    colcnt = rsmd.getColumnCount(); // COLの値を入れる
		    
		    // ROWのおおきさ
			rs.last();   //　ROWのカーソルを最後に
			rowcnt = rs.getRow(); // ROWの値を入れる
			
			String[][] res = new String[rowcnt][colcnt]; // String[行][列]		
			rs.beforeFirst(); // ROWのカーソルを最初に
			
			// TABLE[0からrowcnt][0]にTESTNOの全てのレコードの値を、
			// TABLE[0からrowcnt][1]にNAMEの全てのレコードの値を、
			// TABLE[0からrowcnt][2]にKANAの全てのレコードの値を、入れます。
			for( int i = 0;i < rowcnt;i++ ) {
					if( rs.next() ) {
						String tn = rs.getString("TESTNO");
						String nm = rs.getString("NAME");
						String kn = rs.getString("KANA");
						
						res[i][0] = tn;
						res[i][1] = nm;
						res[i][2] = kn;
					}
				}
				return res;
		} catch (SQLException e) {
			e.printStackTrace();
				return null;
		}
	}
}